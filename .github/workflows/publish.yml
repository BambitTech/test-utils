
name: publish
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'main'       # Run the workflow when pushing to the main branch
  pull_request:
    branches:
      - '*'          # Run the workflow for all pull requests
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  create_nuget:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    # Create the NuGet package in the folder from the environment variable NuGetDirectory
    - run: dotnet pack source/libraries/Bambit.TestUtility.DataGeneration/ --configuration Release --output ${{ env.NuGetDirectory }}

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v4
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.*nupkg

  validate_nuget:
    runs-on: ubuntu-latest
    needs: [ create_nuget ]
    steps:
      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Install nuget validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

      # Validate metadata and content of the NuGet package
      # https://www.nuget.org/packages/Meziantou.Framework.NuGetPackageValidation.Tool#readme-body-tab
      # If some rules are not applicable, you can disable them
      # using the --excluded-rules or --excluded-rule-ids option
      - name: Validate package
        run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg")

  run_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer
    - name: Startup Container
      shell: bash
      run: |
        # In this scenario with a fresh container used for testing,
        # it is acceptable to use a plain-text password
        docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=Admin123" \
        -p 1433:1433 -d mcr.microsoft.com/mssql/server:2022-latest
    - name: üöÄ Install required PowerShell module
      uses: potatoqualitee/psmodulecache@v4.5
      with:
        modules-to-cache: dbatools
    - name: üõ¢Ô∏è Get all databases, create new database, execute query
      run: |
        # Give the container a moment to startup
        sleep 5
        # Create a database
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Admin123 -q "create database IntegrationTests"
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Admin123 -q "CREATE LOGIN [TestUser] WITH PASSWORD=N'Test1234!' "
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Admin123 -d IntegrationTests -q "CREATE USER [TestUser] FOR LOGIN [TestUser];"
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Admin123 -d IntegrationTests -q "ALTER ROLE [db_owner] ADD MEMBER [TestUser]"
        # Deploy test database
        /opt/mssql-tools/bin/sqlcmd -S localhost -d IntegrationTests -U sa -P Admin123 -i "./source/tests/Resources/CreateTestDatabase.SqlServer.sql"
    - uses: cschleiden/replace-tokens@v1
      with:
        files: '["**/*.json"]'
      env:
        SqlServerDatabaseConnectionString: Server=localhost; Database=IntegrationTests;User ID=TestUser;Password=Test1234!;Connection Timeout=30
        SqlServerPrimaryDatabaseName: IntegrationTests
    - name: Setup .NET
      uses: actions/setup-dotnet@v4 
    - name: Run tests
      run: dotnet test source/TestUtilities.sln --configuration Release -p:CollectCoverage=true -p:CoverletOutput=../TestResults/ -p:CoverletOutputFormat=lcov -p:MergeWith=../TestResults/coverlet.json --collect:"XPlat Code Coverage" -p:CoverletOutputFormat=\"cobertura\"
    
    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.3.8
      with:
        reports: 'source/tests/**/TestResults/**/coverage.cobertura.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: 'coveragereport' # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'HtmlInline;lcov;Clover' # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, OpenCover, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, Html_BlueRed_Summary, JsonSummary, CodeClimate, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownAssembliesSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, SvgChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
        sourcedirs: 'source/' # Optional directories which contain the corresponding source code (separated by semicolon). The source directories are used if coverage report contains classes without path information.
        assemblyfilters: '+*;-*.Tests.dll' # Optional list of assemblies that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        classfilters: '+*' # Optional list of classes that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        filefilters: '+*' # Optional list of files that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        riskhotspotassemblyfilters: '+*' # Optional list of assemblies that should be included or excluded in the risk hotspots. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        riskhotspotclassfilters: '+*' # Optional list of classes that should be included or excluded in the risk hotspots. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        verbosity: 'Info' # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
        title: '' # Optional title.
        tag: '${{ github.run_number }}_${{ github.run_id }}' # Optional tag or build version.
        customSettings: '' # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
        toolpath: 'reportgeneratortool' # Default directory for installing the dotnet tool.
    
    - name: Publish coverage report to coveralls.io   
      uses: coverallsapp/github-action@master   
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }} 
        path-to-lcov: coveragereport/lcov.info
        
    - name: Upload coverage report artifact
      uses: actions/upload-artifact@v4
      with:
        name: CoverageReport # Artifact name        
        path: coveragereport # Directory containing files to upload
    - name: Verify Coverage
      uses: themichaelhall/check-code-coverage@v2
      with:
        report: coveragereport/Clover.xml
        required-percentage: 90  
  deploy:
    # Publish only when creating a GitHub Release
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ validate_nuget, run_test ]
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }