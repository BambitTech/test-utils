name: Run Test Suite

on:
  workflow_call:
  
jobs:
  run_tests_job:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      # Postgres service
      postgres: 
        # Docker image
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: TestUtilities
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer
    - name: üêã Startup SQL Server Container
      shell: bash
      run: |
        # In this scenario with a fresh container used for testing,
        # it is acceptable to use a plain-text password
        docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=Admin123" \
        -p 1433:1433 -d mcr.microsoft.com/mssql/server:2022-CU13-ubuntu-22.04
    - name: üõ¢Ô∏è Create test databases
      env: 
        PGPASSWORD: postgres
      run: |
        # Give the container a moment to startup
        sleep 5
        # Create a database
        find / -name sqlcmd
        
        
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Admin123 -q "create database IntegrationTests"
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Admin123 -q "CREATE LOGIN [TestUser] WITH PASSWORD=N'Test1234!' "
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Admin123 -d IntegrationTests -q "CREATE USER [TestUser] FOR LOGIN [TestUser];"
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Admin123 -d IntegrationTests -q "ALTER ROLE [db_owner] ADD MEMBER [TestUser]"
        # Deploy test database
        /opt/mssql-tools/bin/sqlcmd -S localhost -d IntegrationTests -U sa -P Admin123 -i "./source/tests/Resources/CreateTestDatabase.SqlServer.sql"
        # Add the postgres database
        psql -d  postgresql://postgres@localhost/TestUtilities -f "./source/tests/Resources/CreateTestDatabase.PostgreSQL.sql"
    - uses: cschleiden/replace-tokens@v1
      with:
        files: '["**/*.json"]'
      env:
        SqlServerDatabaseConnectionString: Server=localhost; Database=IntegrationTests;User ID=TestUser;Password=Test1234!;Connection Timeout=30
        SqlServerPrimaryDatabaseName: IntegrationTests
        PostgresDatabaseConnectionString: User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=TestUtilities;Pooling=true;MinPoolSize=0;MaxPoolSize=100;Connection Lifetime=0;IncludeErrorDetail=true;Timeout=30
        PostgresPrimaryDatabaseName: TestUtilities
    - name: Setup .NET
      uses: actions/setup-dotnet@v4 
    - name: Run tests
      run: dotnet test source/TestUtilities.sln --configuration Release -p:CollectCoverage=true -p:CoverletOutput=../TestResults/ -p:CoverletOutputFormat=lcov -p:MergeWith=../TestResults/coverlet.json --collect:"XPlat Code Coverage" -p:CoverletOutputFormat=cobertura  -p:ExcludeByFile="*/**/*.g.cs"
    
    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.3.8
      with:
        reports: 'source/tests/**/TestResults/**/coverage.cobertura.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: 'coveragereport' # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'HtmlInline;lcov;Clover' # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, OpenCover, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, Html_BlueRed_Summary, JsonSummary, CodeClimate, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownAssembliesSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, SvgChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
        sourcedirs: 'source/' # Optional directories which contain the corresponding source code (separated by semicolon). The source directories are used if coverage report contains classes without path information.
        assemblyfilters: '+*;-*.Tests.dll' # Optional list of assemblies that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        classfilters: '+*' # Optional list of classes that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        filefilters: '+*;-*.g.cs' # Optional list of files that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        riskhotspotassemblyfilters: '+*' # Optional list of assemblies that should be included or excluded in the risk hotspots. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        riskhotspotclassfilters: '+*' # Optional list of classes that should be included or excluded in the risk hotspots. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        verbosity: 'Info' # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
        title: '' # Optional title.
        tag: '${{ github.run_number }}_${{ github.run_id }}' # Optional tag or build version.
        customSettings: '' # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
        toolpath: 'reportgeneratortool' # Default directory for installing the dotnet tool.
    
    - name: Publish coverage report to coveralls.io   
      uses: coverallsapp/github-action@master   
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }} 
        path-to-lcov: coveragereport/lcov.info
        debug: true
        
    - name: Upload coverage report artifact
      uses: actions/upload-artifact@v4
      with:
        name: CoverageReport # Artifact name        
        path: coveragereport # Directory containing files to upload
    - name: Verify Coverage
      uses: themichaelhall/check-code-coverage@v2
      with:
        report: coveragereport/Clover.xml
        required-percentage: 90  